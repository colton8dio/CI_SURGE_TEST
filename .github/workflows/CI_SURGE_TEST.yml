name: CI_CMake_Test

on:
  workflow_dispatch: # lets you run a build from the UI
  #Runs when a push on main branch is made.
  push:
    branches:
    - main

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
# Defines Name (must match), What type of build (release, debug), Where to store builds, Git tokens, threading, homebrew install cleanup
env:
  PROJECT_NAME: CI_CMake_Test
  BUILD_TYPE: Release
  BUILD_DIR: Builds
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CMAKE_BUILD_PARALLEL_LEVEL: 3 # Use up to 3 cpus to build juceaide, etc
  HOMEBREW_NO_INSTALL_CLEANUP: 1

# jobs are run in paralell on different machines
# all steps run in series
jobs:
  build_and_test:
    env:
      # Unique keychain name so concurrent jobs don't get confused
      KEYCHAIN: job-${{ github.job }}-${{ github.run_id	}}-${{ github.run_number }}-${{ github.run_attempt }}
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
      matrix:
        include:
          - name: macOS
            runner: [self-hosted, macos]
            os: macos-12
            pluginval-binary: pluginval.app/Contents/MacOS/pluginval
          # inlcude another matrix set up for windows (make sure name matches pluginval URL)
          - name: Windows
            runner: [self-hosted, windows]
            os: windows-latest
            pluginval-binary: ./pluginval.exe


    steps:
      # Might be able to just delete this step since we're locally hosted and this is already installed.
      # ninja is a build system for CMake for faster builds https://ninja-build.org
      # For npm of DMG creation
      # touch ~/.zshrc
      # curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh | bash
      # nvm install node --reinstall-packages-from=node
      # nvm install-latest-npm
      # ensure everything is connected properly in the packages folder. The Json and .iss file needs to be updated with correct project names
    - name: Install macOS Deps
      if: ${{ matrix.name == 'macOS' }}
      run: |
        brew install ninja osxutils
        brew install p7zip

      # Grabs JUCE git (idk how checkouts work)
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: true # Gotta get JUCE populated

    - name: Setup Environment Variables
      shell: bash
      run: |
        VERSION=$(cat VERSION)
        echo "ARTIFACTS_PATH=${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}" >> $GITHUB_ENV
        echo "VST3_PATH=${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/VST3/${{ env.PROJECT_NAME }}.vst3" >> $GITHUB_ENV
        echo "Mac_VST_PATH=${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/VST/${{ env.PROJECT_NAME }}.vst" >> $GITHUB_ENV
        echo "Windows_VST_PATH=${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/VST/${{ env.PROJECT_NAME }}.dll" >> $GITHUB_ENV
        echo "AU_PATH=${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/AU/${{ env.PROJECT_NAME }}.component" >> $GITHUB_ENV
        #echo "AUV3_PATH=${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/AUv3/${{ env.PROJECT_NAME }}.appex" >> $GITHUB_ENV
        echo "Standalone_PATH=${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/Standalone/${{ env.PROJECT_NAME }}.app" >> $GITHUB_ENV
        echo "Mac_AAX_DIR=${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/AAX/${{ env.PROJECT_NAME }}.aaxplugin" >> $GITHUB_ENV
        echo "Mac_AAX_PATH=${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/AAX/${{ env.PROJECT_NAME }}.aaxplugin" >> $GITHUB_ENV
        echo "Windows_AAX_PATH=${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/AAX/${{ env.PROJECT_NAME }}.aaxplugin/Contents/x64/${{ env.PROJECT_NAME }}.aaxplugin" >> $GITHUB_ENV
        echo "Windows_Pluginval=C:\ProgramData\chocolatey\lib\pluginval\tools\pluginval.exe" >> $GITHUB_ENV
        echo "Mac_Wraptool_PATH=/Applications/PACEAntiPiracy/Eden/Fusion/Versions/5/bin/wraptool" >> $GITHUB_ENV
        echo "PRODUCT_NAME=${{ env.PROJECT_NAME }}-$VERSION-${{ matrix.name }}" >> $GITHUB_ENV

      # A cache compiler to speed up build times. https://github.com/ccache/ccache
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: v2-${{ matrix.os }}-${{ matrix.type }}


  # Need apple secrets, p12 stuff set up. Related to -name Codesign (macOs)
    - name: Import Certificates (macOS)
      uses: apple-actions/import-codesign-certs@v1
      if: ${{ matrix.name == 'macOS' }}
      with:
        keychain: ${{ env.KEYCHAIN }}
        p12-file-base64: ${{ secrets.DEV_ID_APP_CERT }}
        p12-password: ${{ secrets.DEV_ID_APP_PASSWORD }}

    - name: Configure (MacOS)
      if: ${{ matrix.name == 'macOS' }}
      shell: bash
      run: cmake -B ${{ env.BUILD_DIR }} -G Ninja -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE}} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" .

      #ninja has issues with pluginval and/or running in powersehll.
    - name: Configure (Windows)
      if: ${{ matrix.name == 'Windows' }}
      shell: pwsh
      run: cmake -B ${{ env.BUILD_DIR }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE}} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache .


    - name: Build (MacOS)
      if: ${{ matrix.name == 'macOS' }}
      shell: bash
      run: cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }} --parallel 4

    - name: Build (Windows)
      if: ${{ matrix.name == 'Windows' }}
      shell: pwsh
      run: cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }} --parallel 4

    - name: Test
      working-directory: ${{ env.BUILD_DIR }}
      run: ctest --output-on-failure -j4

  # Sign AAX with the crazy PACE tools
  # This needs an absolute path at end of command
    - name: AAX Signing (macOS)
      if: ${{ matrix.name == 'macOS' }}
      run: |
        ${{ env.Mac_Wraptool_PATH }} sign --verbose --allowsigningservice --account ${{ secrets.ILOK_USERNAME }} --signid "${{ secrets.DEVELOPER_ID_APPLICATION}}" --wcguid ${{ secrets.WCGUID }} --in ${{ env.Mac_AAX_PATH }} --out ${{ env.Mac_AAX_PATH }} --autoinstall on
        ${{ env.Mac_Wraptool_PATH }} verify --verbose --in ${{ env.Mac_AAX_PATH }}

  #pathto\wraptool sign --verbose --account “ilokusername” (--password “ilokpassword” )--in “pathto\Soundpaint.aaxplugin" --out "Soundpaint.aaxplugin" --keyfile “pathto\Certificates.p12” --keypassword “applepassword” --wcguid “FC40D120-B9DD-11EC-8D2C-005056920FF7”
    - name: AAX Signing (Windows)
      if: ${{ matrix.name == 'Windows' }}
      shell: pwsh
      run: |
        wraptool sign --verbose --allowsigningservice --account ${{ secrets.ILOK_USERNAME }} --password ${{ secrets.ILOK_PASSWORD }} --keyfile “C:\Users\Colton.DESKTOP-L3D8I91\Desktop\8Dio_Cert.p12” --keypassword ${{ secrets.DEV_ID_APP_PASSWORD }} --wcguid ${{ secrets.WCGUID }} --in ${{ env.Windows_AAX_PATH }} --out ${{ env.Windows_AAX_PATH }} --autoinstall on
        wraptool verify --verbose --in ${{ env.Windows_AAX_PATH }}

  # For 7z command - brew install p7zip
  # Pluginval on Windows isn't compatible with Ninja.
    - name: Pluginval (macOS)
      if: ${{ matrix.name == 'macOS' }}
      working-directory: ${{ env.BUILD_DIR }}
      shell: bash
      run: |
        curl -LO "https://github.com/Tracktion/pluginval/releases/download/v1.0.1/pluginval_${{ matrix.name }}.zip"
        7z x pluginval_${{ matrix.name }}.zip
        ${{ matrix.pluginval-binary }} --strictness-level 10 --verbose --validate "${{ env.VST3_PATH }}"
        ${{ matrix.pluginval-binary }} --strictness-level 10 --verbose --validate "${{ env.Mac_VST_PATH }}"
        ${{ matrix.pluginval-binary }} --strictness-level 10 --verbose --validate "${{ env.AU_PATH }}"

    - name: Pluginval (Windows)
      if: ${{ matrix.name == 'Windows' }}
      working-directory: ${{ env.BUILD_DIR }}
      shell: pwsh
      run: |
        ${{ env.Windows_Pluginval }} --strictness-level 10 --verbose --validate "${{ env.Windows_VST_PATH }}"
        ${{ env.Windows_Pluginval }} --strictness-level 10 --verbose --validate "${{ env.VST3_PATH }}"

  # Need code signing stuff or will get error. Releated to -name Import Certificates (macOS)
    - name: Codesign (macOS)
      working-directory: ${{ env.BUILD_DIR }}
      if: ${{ matrix.name == 'macOS' }}
      run: |
        # Each plugin must be code signed
        codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" -v ${{ env.VST3_PATH }} --deep --strict --options=runtime --timestamp
        codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" -v ${{ env.Mac_VST_PATH }} --deep --strict --options=runtime --timestamp
        codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" -v ${{ env.AU_PATH }} --deep --strict --options=runtime --timestamp
        codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" -v ${{ env.Standalone_PATH }} --deep --strict --options=runtime --timestamp

    # Must change out the icns filename
    - name: Add Custom Icons (macOS)
      if: ${{ matrix.name == 'macOS' }}
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        # add the icns as its own icon resource (meta!)
        sips -i ../packaging/${{ env.PROJECT_NAME }}.icns

        # Grab the resource, put in tempfile
        DeRez -only icns ../packaging/${{ env.PROJECT_NAME }}.icns > /tmp/icons

        # Stuff the resource into the strange Icon? file's resource fork
        Rez -a /tmp/icons -o ${{ env.VST3_PATH }}/Icon$'\r'
        Rez -a /tmp/icons -o ${{ env.Mac_VST_PATH }}/Icon$'\r'
        Rez -a /tmp/icons -o ${{ env.AU_PATH }}/Icon$'\r'
        Rez -a /tmp/icons -o ${{ env.Mac_AAX_DIR }}/Icon$'\r'

        # Set custom icon attribute
        SetFile -a C ${{ env.VST3_PATH }}
        SetFile -a C ${{ env.Mac_VST_PATH }}
        SetFile -a C ${{ env.AU_PATH }}
        SetFile -a C ${{ env.Mac_AAX_DIR }}

      # You'll need an account with NPM to install and use this. https://www.npmjs.com/signup (maybe add this to Install macOS Deps) Check mac dependencies section
    - name: Create DMG, Notarize and Staple (macOS)
      if: ${{ matrix.name == 'macOS' }}
      run: |
        npm install -g appdmg
        mkdir -p packaging/dmg

        # Create directories for the dmg symlinks
        sudo mkdir -m 755 -p /Library/Audio/Plug-Ins/Components && sudo mkdir -m 755 -p /Library/Audio/Plug-Ins/VST3 && sudo mkdir -m 755 -p /Library/Application\ Support/Avid/Audio/Plug-Ins && sudo mkdir -m 755 -p ~/Desktop
        ln -s /Library/Application\ Support/Avid/Audio/Plug-Ins "packaging/dmg/Your Mac's AAX folder"
        ln -s /Library/Audio/Plug-Ins/VST3 "packaging/dmg/Your Mac's VST3 folder"
        ln -s /Library/Audio/Plug-Ins/VST "packaging/dmg/Your Mac's VST folder"
        ln -s /Library/Audio/Plug-Ins/Components "packaging/dmg/Your Mac's Component folder"
        ln -s ~/Desktop "packaging/dmg/Your Mac's Desktop folder"
        mv "${{ env.ARTIFACTS_PATH }}/AAX/${{ env.PROJECT_NAME }}.aaxplugin" packaging/dmg
        mv "${{ env.ARTIFACTS_PATH }}/VST3/${{ env.PROJECT_NAME }}.vst3" packaging/dmg
        mv "${{ env.ARTIFACTS_PATH }}/VST/${{ env.PROJECT_NAME }}.vst" packaging/dmg
        mv "${{ env.ARTIFACTS_PATH }}/AU/${{ env.PROJECT_NAME }}.component" packaging/dmg
        mv "${{ env.ARTIFACTS_PATH }}/Standalone/${{ env.PROJECT_NAME }}.app" packaging/dmg

        # Run appdmg to create the .dmg
        cd packaging && appdmg dmg.json ${{ env.PRODUCT_NAME}}.dmg
        codesign -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" --timestamp -i com.jucetest.jucetest --force ${{ env.PRODUCT_NAME }}.dmg
        xcrun notarytool submit ${{ env.PRODUCT_NAME }}.dmg --apple-id ${{ secrets.NOTARIZATION_USERNAME }} --password ${{ secrets.NOTARIZATION_PASSWORD }} --team-id ${{ secrets.TEAM_ID }} --wait
        xcrun stapler staple ${{ env.PRODUCT_NAME }}.dmg

      #You need to install the packaging app. http://s.sudre.free.fr/Software/documentation/Packages/en_2017/index.html
    - name: Create PKG, Notarize and Staple (macOS)
      if: ${{ matrix.name == 'macOS' }}
      run: |
        cd packaging
        #run package maker
        /usr/local/bin/packagesbuild --project ${{ env.PROJECT_NAME }}_MacInstaller.pkgproj
        mv ${{ env.PROJECT_NAME }}.pkg ${{ env.PRODUCT_NAME}}.pkg

        #codesign -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" --timestamp -i com.jucetest.jucetest --force ${{ env.PRODUCT_NAME }}.pkg
        #xcrun notarytool submit ${{ env.PRODUCT_NAME }}.pkg --apple-id ${{ secrets.NOTARIZATION_USERNAME }} --password ${{ secrets.NOTARIZATION_PASSWORD }} --team-id ${{ secrets.TEAM_ID }} --wait
        #xcrun stapler staple ${{ env.PRODUCT_NAME }}.pkg

    - name: Generate Installer and Sign with EV cert on Azure (Windows)
      if: ${{ matrix.name == 'Windows' }}
      shell: bash
      run: |
        sleep 15
        iscc "packaging\installer.iss"
        cd ${{ env.BUILD_DIR }}
        cd ../
        cp "packaging/Output/${{ env.PRODUCT_NAME }}.exe" "${{ env.ARTIFACTS_PATH }}/"
        #dotnet tool install --global AzureSignTool
        #AzureSignTool sign -kvu "${{ secrets.AZURE_KEY_VAULT_URI }}" -kvi "${{ secrets.AZURE_CLIENT_ID }}" -kvt "${{ secrets.AZURE_TENANT_ID }}" -kvs "${{ secrets.AZURE_CLIENT_SECRET }}" -kvc ${{ secrets.AZURE_CERT_NAME }} -tr http://timestamp.digicert.com -v "${{ env.ARTIFACTS_PATH }}/${{ env.PRODUCT_NAME }}.exe"

    - name: Upload Exe (Windows)
      if: ${{ matrix.name == 'Windows' }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PRODUCT_NAME }}.exe
        path: '${{ env.ARTIFACTS_PATH }}/${{ env.PRODUCT_NAME }}.exe'

    - name: Upload DMG (MacOS)
      if: ${{ matrix.name == 'macOS' }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PRODUCT_NAME }}.dmg
        path: packaging/${{ env.PRODUCT_NAME }}.dmg

    - name: Upload PKG (MacOS)
      if: ${{ matrix.name == 'macOS' }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PRODUCT_NAME }}.pkg
        path: packaging/${{ env.PRODUCT_NAME }}.pkg

    - name: Delete keychain
      if: ${{ matrix.name == 'macOS' }}
      run: |
        security delete-keychain "${{ env.KEYCHAIN }}".keychain
